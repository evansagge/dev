# Copied from: https://github.com/tangledhelix/dotfiles/blob/master/tmux.conf

set-option -g default-command "reattach-to-user-namespace -l /bin/zsh"

###########################################################################
# Change prefix from default (C-b) to C-a
# C-a doesn't interfere with emacs-style editing keys

unbind -n C-b
unbind -n C-a
set -g prefix C-a

# C-a C-a to passthrough a C-a
unbind C-a
bind C-a send-key C-a

###########################################################################
# General options

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Ring the bell if any background window rang a bell
set -g bell-action any

# Watch for activity in background windows
setw -g monitor-activity on

# scrollback size
set -g history-limit 10000

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
set -g xterm-keys on

# faster esc
set -s escape-time 0

# set -g focus-events on

###########################################################################
# Powerline

source '/usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf'

###########################################################################
# General keymap

# Keep your finger on ctrl, or don't, same result
bind-key C-d detach-client
bind-key C-c new-window -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"
bind-key C-p paste-buffer

# Redraw the client (if interrupted by wall, etc)
bind R refresh-client

# reload tmux config
unbind r
bind r source-file ~/.tmux.conf \; display 'Reloaded tmux config.'

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys emacs

bind-key : command-prompt
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

###########################################################################
# Window management / navigation

# C-\ (no prefix) to skip to last window we were in before this one
bind -n "C-\\" last-window

# C-Space (no prefix) to tab to next window
bind -n C-Space next-window

###########################################################################
# Pane management / navigation

# Horizontal splits with s or C-s
unbind s
unbind C-s
bind-key s split-window -v -c "#{pane_current_path}"

# Vertical split with v or C-v
unbind v
unbind C-v
bind-key v split-window -h -c "#{pane_current_path}"

# use vim-like keys for splits and windows
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind C-l send-keys 'C-l'

# C-g C-k to passthrough a C-k
# C-k is consumed for pane navigation but we want it for kill-to-eol
unbind C-k
bind C-k send-key C-k

# clear screen
# bind c if-shell "$is_vim" "send-keys c" "send-keys 'C'"
# clear screen and history
# bind C send-keys C-l \; run-shell "sleep .3s" \; clear-history

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to Cmd-Opt-<h,j,k,l> in iTerm2.
# http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/
# Note on a few prefix options: C-a = 0x01, C-b = 0x02, C-g = 0x06
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key H resize-pane -L
bind-key L resize-pane -R

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

###########################################################################
# Scrollback / pastebuffer

# Vim-style copy/paste
# Use vi keybindings in copy and choice modes
set -g status-keys vi
setw -g mode-keys vi

unbind [
bind y copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
bind -t vi-copy Escape cancel

###########################################################################
# Mouse mode

set -g mouse on

##########################################################################a
# Color scheme (Solarized Dark)

# Set the status bar background and foreground to black and white, respectively
set -g status-bg black
set -g status-fg white

# Highlight inactive windows with a dim cyan color
setw -g window-status-bg default
setw -g window-status-fg cyan
setw -g window-status-attr dim

# Highlight active windows with a bright red color
setw -g window-status-current-bg black
setw -g window-status-current-fg red
setw -g window-status-current-attr bright

# Set inactive pane borders in yellow
set -g pane-border-bg black
set -g pane-border-fg yellow

# Highlight active pane borders in green
set -g pane-active-border-bg black
set -g pane-active-border-fg green

# Hightlight the command line with a black background and a bright, white text
set -g message-bg black
set -g message-fg white
set -g message-attr bright

#set inactive/active window styles
# set -g window-style 'fg=colour247,bg=colour236'
# set -g window-active-style 'fg=colour250,bg=black'

# pane number display
set-option -g display-panes-active-colour red
set-option -g display-panes-colour white

# clock
set-window-option -g clock-mode-colour cyan



##########################################################################a

